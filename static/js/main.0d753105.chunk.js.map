{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","dateOfBirth","setDateOfBirth","outputMessage","setOutputMessage","dateOfBirthObj","dateStringToDateObject","dateAsString","dateOfBirthList","split","fullDate","date","month","year","allDateFormats","slice","allFormatPalindromeCheck","isPalindrome","forEach","format","reverse","join","isLeapYear","Number","className","htmlFor","id","type","name","onChange","event","target","value","onClick","previousPalindromeDate","nextPalindromeDate","toReturnVal","previousPalindromeYearAndYearOfBirthDifference","nextPalindromeYearAndYearOfBirthDifference","previousPalindromeMonthAndMonthOfBirthDifference","nextPalindromeMonthAndMonthOfBirthDifference","previousPalindromeDateAndDateOfBirthDifference","nextPalindromeDateAndDateOfBirthDifference","Math","abs","findingClosestPalindromeDate","currentDate","currentFullDate","noOfDaysInMonthsInOrder","toString","findingPreviousPalindromeDate","findingNextPalindromeDate","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d753105.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [dateOfBirth, setDateOfBirth] = useState(\"\");\n  const [outputMessage, setOutputMessage] = useState(\n    \"Enter a date and press the button to continue.\"\n  );\n\n  const errorMessage = \"You need to enter a date first to continue.\";\n  const palindromeTrueMessage = \"Yay! Your birthday is a palindrome date.\";\n  const palindromeFalseMessage = \"Nay! Your birthday is not a palindrome date.\";\n  const dateOfBirthObj = dateStringToDateObject(dateOfBirth);\n\n  function clickHandler() {\n    dateStringToDateObject(dateOfBirth);\n    if (dateOfBirth === \"\") {\n      setOutputMessage(errorMessage);\n    } else {\n      if (\n        allFormatPalindromeCheck(\n          allDateFormats(dateStringToDateObject(dateOfBirth))\n        )\n      ) {\n        setOutputMessage(palindromeTrueMessage);\n      } else {\n        setOutputMessage(\n          `${palindromeFalseMessage} Closest palindrome date to your date of birth is ${findingClosestPalindromeDate(\n            findingPreviousPalindromeDate(dateOfBirth),\n            findingNextPalindromeDate(dateOfBirth)\n          )}.`\n        );\n      }\n    }\n  }\n\n  function dateStringToDateObject(dateAsString) {\n    let dateOfBirthList = dateAsString.split(\"-\");\n    let fullDate = { date: \"\", month: \"\", year: \"\" };\n    fullDate.date = dateOfBirthList[2];\n    fullDate.month = dateOfBirthList[1];\n    fullDate.year = dateOfBirthList[0];\n    return fullDate;\n  }\n\n  function allDateFormats(fullDate) {\n    let mmddyyyyFullDateString = fullDate.month + fullDate.date + fullDate.year;\n    let mmddyyFullDateString =\n      fullDate.month + fullDate.date + fullDate.year.slice(2, 4);\n    let ddmmyyFullDateString =\n      fullDate.date + fullDate.month + fullDate.year.slice(2, 4);\n    let ddmmyyyyFullDateString = fullDate.date + fullDate.month + fullDate.year;\n    let yyyymmddFullDateString = fullDate.year + fullDate.month + fullDate.date;\n    let yymmddFullDateString =\n      fullDate.year.slice(2, 4) + fullDate.month + fullDate.date;\n    return [\n      mmddyyyyFullDateString,\n      mmddyyFullDateString,\n      ddmmyyFullDateString,\n      ddmmyyyyFullDateString,\n      yyyymmddFullDateString,\n      yymmddFullDateString,\n    ];\n  }\n\n  function unoReverseMaker(normalString) {\n    let unoString = normalString.split(\"\").reverse().join(\"\");\n    return unoString;\n  }\n\n  function allFormatPalindromeCheck(allDateFormats) {\n    let isPalindrome = false;\n    allDateFormats.forEach((format) => {\n      if (format === unoReverseMaker(format)) {\n        isPalindrome = true;\n      }\n    });\n    return isPalindrome;\n  }\n\n  function isLeapYear(year) {\n    let yearNumber = Number(year);\n    if (yearNumber % 4 === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function findingNextPalindromeDate(currentDate) {\n    let currentFullDate = dateStringToDateObject(currentDate);\n\n    let noOfDaysInMonthsInOrder = [\n      31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n    ];\n\n    if (isLeapYear(currentFullDate.year)) {\n      noOfDaysInMonthsInOrder[1] = 29;\n    } else {\n      noOfDaysInMonthsInOrder[1] = 28;\n    }\n\n    while (\n      allFormatPalindromeCheck(allDateFormats(currentFullDate)) === false\n    ) {\n      currentFullDate.date++;\n      if (\n        currentFullDate.date >\n        noOfDaysInMonthsInOrder[currentFullDate.month - 1]\n      ) {\n        currentFullDate.date = 1;\n        currentFullDate.month++;\n        if (currentFullDate.month > 12) {\n          currentFullDate.month = 1;\n          currentFullDate.year++;\n          currentFullDate.year = currentFullDate.year.toString();\n        }\n        if (currentFullDate.month < 10) {\n          currentFullDate.month = \"0\" + currentFullDate.month;\n        } else {\n          currentFullDate.month = currentFullDate.month.toString();\n        }\n      }\n      if (currentFullDate.date < 10) {\n        currentFullDate.date = \"0\" + currentFullDate.date;\n      } else {\n        currentFullDate.date = currentFullDate.date.toString();\n      }\n    }\n    return currentFullDate;\n  }\n\n  function findingPreviousPalindromeDate(currentDate) {\n    let currentFullDate = dateStringToDateObject(currentDate);\n\n    let noOfDaysInMonthsInOrder = [\n      31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n    ];\n\n    if (isLeapYear(currentFullDate.year)) {\n      noOfDaysInMonthsInOrder[1] = 29;\n    } else {\n      noOfDaysInMonthsInOrder[1] = 28;\n    }\n\n    while (\n      allFormatPalindromeCheck(allDateFormats(currentFullDate)) === false\n    ) {\n      currentFullDate.date--;\n      if (currentFullDate.date === 0) {\n        currentFullDate.month--;\n        if (currentFullDate.month === 0) {\n          currentFullDate.month = \"12\";\n          currentFullDate.year--;\n          currentFullDate.year = currentFullDate.year.toString();\n        } else if (currentFullDate.month < 10) {\n          currentFullDate.month = \"0\" + currentFullDate.month;\n        } else {\n          currentFullDate.month = currentFullDate.month.toString();\n        }\n        currentFullDate.date =\n          noOfDaysInMonthsInOrder[currentFullDate.month - 1];\n\n        currentFullDate.date = currentFullDate.date.toString();\n      }\n      if (currentFullDate.date < 10) {\n        currentFullDate.date = \"0\" + currentFullDate.date;\n      } else {\n        currentFullDate.date = currentFullDate.date.toString();\n      }\n    }\n    return currentFullDate;\n  }\n\n  function findingClosestPalindromeDate(\n    previousPalindromeDate,\n    nextPalindromeDate\n  ) {\n    let toReturnVal;\n    let previousPalindromeYearAndYearOfBirthDifference =\n      Number(dateOfBirthObj.year) - Number(previousPalindromeDate.year);\n    let nextPalindromeYearAndYearOfBirthDifference =\n      Number(dateOfBirthObj.year) - Number(nextPalindromeDate.year);\n    let previousPalindromeMonthAndMonthOfBirthDifference =\n      Number(dateOfBirthObj.month) - Number(previousPalindromeDate.month);\n    let nextPalindromeMonthAndMonthOfBirthDifference =\n      Number(dateOfBirthObj.month) - Number(nextPalindromeDate.month);\n    let previousPalindromeDateAndDateOfBirthDifference =\n      Number(dateOfBirthObj.date) - Number(previousPalindromeDate.date);\n    let nextPalindromeDateAndDateOfBirthDifference =\n      Number(dateOfBirthObj.date) - Number(nextPalindromeDate.date);\n    if (\n      Math.abs(previousPalindromeYearAndYearOfBirthDifference) >\n      Math.abs(nextPalindromeYearAndYearOfBirthDifference)\n    ) {\n      toReturnVal = nextPalindromeDate;\n    } else if (\n      Math.abs(nextPalindromeYearAndYearOfBirthDifference) >\n      Math.abs(previousPalindromeYearAndYearOfBirthDifference)\n    ) {\n      toReturnVal = previousPalindromeDate;\n    } else {\n      if (\n        Math.abs(previousPalindromeMonthAndMonthOfBirthDifference) >\n        Math.abs(nextPalindromeMonthAndMonthOfBirthDifference)\n      ) {\n        toReturnVal = nextPalindromeDate;\n      } else if (\n        Math.abs(nextPalindromeMonthAndMonthOfBirthDifference) >\n        Math.abs(previousPalindromeMonthAndMonthOfBirthDifference)\n      ) {\n        toReturnVal = previousPalindromeDate;\n      } else {\n        if (\n          Math.abs(previousPalindromeDateAndDateOfBirthDifference) >\n          Math.abs(nextPalindromeDateAndDateOfBirthDifference)\n        ) {\n          toReturnVal = nextPalindromeDate;\n        } else if (\n          Math.abs(nextPalindromeDateAndDateOfBirthDifference) >\n          Math.abs(previousPalindromeDateAndDateOfBirthDifference)\n        ) {\n          toReturnVal = previousPalindromeDate;\n        } else {\n          toReturnVal = previousPalindromeDate;\n        }\n      }\n    }\n    let closestPalindromeDateStr = `${toReturnVal.month}-${toReturnVal.date}-${toReturnVal.year}`;\n    return closestPalindromeDateStr;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Is your birthdate palindrome?</h1>\n      </header>\n      <main>\n        <div className=\"input-div\">\n          <label htmlFor=\"dob\">\n            Enter your date of birth:{\" \"}\n            <span id=\"date-format-span\">(mm/dd/yyyy)</span>\n          </label>\n          <input\n            type=\"date\"\n            name=\"dob\"\n            id=\"dob\"\n            onChange={(event) => {\n              setDateOfBirth(event.target.value);\n            }}\n          />\n        </div>\n        <button onClick={clickHandler}>Check</button>\n        <div className=\"output-div\">{outputMessage}</div>\n      </main>\n      <footer>\n        <ul id=\"social-media-tab\">\n          <li>\n            <a className=\"social-media-links\" href=\"https://github.com/iHarryD\">\n              GitHub\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"social-media-links\"\n              href=\"https://www.linkedin.com/in/prashant-kumar-a97251195/\"\n            >\n              LinkedIn\n            </a>\n          </li>\n        </ul>\n        <p id=\"portfolio-link\">\n          Website created by{\" \"}\n          <a href=\"https://iharryd.github.io/portfolio/\">Harry</a>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}