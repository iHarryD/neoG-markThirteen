{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","dateOfBirth","setDateOfBirth","outputMessage","setOutputMessage","dateStringToDateObject","dateAsString","dateOfBirthList","split","fullDate","date","month","year","allDateFormats","slice","allFormatPalindromeCheck","isPalindrome","forEach","format","reverse","join","isLeapYear","Number","findingNextPalindromeDate","currentDate","currentFullDate","dayCount","noOfDaysInMonthsInOrder","toString","findingPreviousPalindromeDate","findingClosestPalindromeDate","previousPalindromeDate","nextPalindromeDate","closestPalindromeDate","closestPalindromeDayCount","previousPalindromeDateObj","previousPalindromeDateDayCount","nextPalindromeDateObj","nextPalindromeDateDayCount","className","htmlFor","id","type","name","onChange","event","target","value","onClick","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79f067f3.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [dateOfBirth, setDateOfBirth] = useState(\"\");\n  const [outputMessage, setOutputMessage] = useState(\n    \"Enter a date and press the button to continue.\"\n  );\n\n  const errorMessage = \"You need to enter a date first to continue.\";\n  const palindromeTrueMessage = \"Yay! Your birthday is a palindrome date.\";\n  const palindromeFalseMessage = \"Nay! Your birthday is not a palindrome date.\";\n\n  function clickHandler() {\n    dateStringToDateObject(dateOfBirth);\n    if (dateOfBirth === \"\") {\n      setOutputMessage(errorMessage);\n    } else {\n      if (\n        allFormatPalindromeCheck(\n          allDateFormats(dateStringToDateObject(dateOfBirth))\n        )\n      ) {\n        setOutputMessage(palindromeTrueMessage);\n      } else {\n        setOutputMessage(\n          `${palindromeFalseMessage} Closest palindrome date to your date of birth is ${\n            findingClosestPalindromeDate(\n              findingPreviousPalindromeDate(dateOfBirth),\n              findingNextPalindromeDate(dateOfBirth)\n            )[0]\n          }. You missed it by ${\n            findingClosestPalindromeDate(\n              findingPreviousPalindromeDate(dateOfBirth),\n              findingNextPalindromeDate(dateOfBirth)\n            )[1]\n          } days. Totally not your fault tho.`\n        );\n      }\n    }\n  }\n\n  function dateStringToDateObject(dateAsString) {\n    let dateOfBirthList = dateAsString.split(\"-\");\n    let fullDate = { date: \"\", month: \"\", year: \"\" };\n    fullDate.date = dateOfBirthList[2];\n    fullDate.month = dateOfBirthList[1];\n    fullDate.year = dateOfBirthList[0];\n    return fullDate;\n  }\n\n  function allDateFormats(fullDate) {\n    let mmddyyyyFullDateString = fullDate.month + fullDate.date + fullDate.year;\n    let mmddyyFullDateString =\n      fullDate.month + fullDate.date + fullDate.year.slice(2, 4);\n    let ddmmyyFullDateString =\n      fullDate.date + fullDate.month + fullDate.year.slice(2, 4);\n    let ddmmyyyyFullDateString = fullDate.date + fullDate.month + fullDate.year;\n    let yyyymmddFullDateString = fullDate.year + fullDate.month + fullDate.date;\n    let yymmddFullDateString =\n      fullDate.year.slice(2, 4) + fullDate.month + fullDate.date;\n    return [\n      mmddyyyyFullDateString,\n      mmddyyFullDateString,\n      ddmmyyFullDateString,\n      ddmmyyyyFullDateString,\n      yyyymmddFullDateString,\n      yymmddFullDateString,\n    ];\n  }\n\n  function unoReverseMaker(normalString) {\n    let unoString = normalString.split(\"\").reverse().join(\"\");\n    return unoString;\n  }\n\n  function allFormatPalindromeCheck(allDateFormats) {\n    let isPalindrome = false;\n    allDateFormats.forEach((format) => {\n      if (format === unoReverseMaker(format)) {\n        isPalindrome = true;\n      }\n    });\n    return isPalindrome;\n  }\n\n  function isLeapYear(year) {\n    let yearNumber = Number(year);\n    if (yearNumber % 4 === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function findingNextPalindromeDate(currentDate) {\n    let currentFullDate = dateStringToDateObject(currentDate);\n    let dayCount = 0;\n\n    let noOfDaysInMonthsInOrder = [\n      31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n    ];\n\n    if (isLeapYear(currentFullDate.year)) {\n      noOfDaysInMonthsInOrder[1] = 29;\n    } else {\n      noOfDaysInMonthsInOrder[1] = 28;\n    }\n\n    while (\n      allFormatPalindromeCheck(allDateFormats(currentFullDate)) === false\n    ) {\n      currentFullDate.date++;\n      dayCount++;\n      if (\n        currentFullDate.date >\n        noOfDaysInMonthsInOrder[currentFullDate.month - 1]\n      ) {\n        currentFullDate.date = 1;\n        currentFullDate.month++;\n        if (currentFullDate.month > 12) {\n          currentFullDate.month = 1;\n          currentFullDate.year++;\n          currentFullDate.year = currentFullDate.year.toString();\n        }\n        if (currentFullDate.month < 10) {\n          currentFullDate.month = \"0\" + currentFullDate.month;\n        } else {\n          currentFullDate.month = currentFullDate.month.toString();\n        }\n      }\n      if (currentFullDate.date < 10) {\n        currentFullDate.date = \"0\" + currentFullDate.date;\n      } else {\n        currentFullDate.date = currentFullDate.date.toString();\n      }\n    }\n    return [currentFullDate, dayCount];\n  }\n\n  function findingPreviousPalindromeDate(currentDate) {\n    let currentFullDate = dateStringToDateObject(currentDate);\n    let dayCount = 0;\n\n    let noOfDaysInMonthsInOrder = [\n      31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n    ];\n\n    if (isLeapYear(currentFullDate.year)) {\n      noOfDaysInMonthsInOrder[1] = 29;\n    } else {\n      noOfDaysInMonthsInOrder[1] = 28;\n    }\n\n    while (\n      allFormatPalindromeCheck(allDateFormats(currentFullDate)) === false\n    ) {\n      currentFullDate.date--;\n      dayCount++;\n      if (currentFullDate.date === 0) {\n        currentFullDate.month--;\n        if (currentFullDate.month === 0) {\n          currentFullDate.month = \"12\";\n          currentFullDate.year--;\n          currentFullDate.year = currentFullDate.year.toString();\n        } else if (currentFullDate.month < 10) {\n          currentFullDate.month = \"0\" + currentFullDate.month;\n        } else {\n          currentFullDate.month = currentFullDate.month.toString();\n        }\n        currentFullDate.date =\n          noOfDaysInMonthsInOrder[currentFullDate.month - 1];\n\n        currentFullDate.date = currentFullDate.date.toString();\n      }\n      if (currentFullDate.date < 10) {\n        currentFullDate.date = \"0\" + currentFullDate.date;\n      } else {\n        currentFullDate.date = currentFullDate.date.toString();\n      }\n    }\n    return [currentFullDate, dayCount];\n  }\n\n  function findingClosestPalindromeDate(\n    previousPalindromeDate,\n    nextPalindromeDate\n  ) {\n    let closestPalindromeDate;\n    let closestPalindromeDayCount;\n    let previousPalindromeDateObj = previousPalindromeDate[0];\n    let previousPalindromeDateDayCount = previousPalindromeDate[1];\n    let nextPalindromeDateObj = nextPalindromeDate[0];\n    let nextPalindromeDateDayCount = nextPalindromeDate[1];\n    if (previousPalindromeDateDayCount > nextPalindromeDateDayCount) {\n      closestPalindromeDate = nextPalindromeDateObj;\n      closestPalindromeDayCount = nextPalindromeDateDayCount;\n    } else if (nextPalindromeDateDayCount > previousPalindromeDateDayCount) {\n      closestPalindromeDate = previousPalindromeDateObj;\n      closestPalindromeDayCount = previousPalindromeDateDayCount;\n    } else {\n      closestPalindromeDate = previousPalindromeDateObj;\n      closestPalindromeDayCount = previousPalindromeDateDayCount;\n    }\n    let closestPalindromeDateStr = `${closestPalindromeDate.month}-${closestPalindromeDate.date}-${closestPalindromeDate.year}`;\n    return [closestPalindromeDateStr, closestPalindromeDayCount];\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Is your birthdate palindrome?</h1>\n      </header>\n      <main>\n        <div className=\"input-div\">\n          <label htmlFor=\"dob\">\n            Enter your date of birth:{\" \"}\n            <span id=\"date-format-span\">(mm/dd/yyyy)</span>\n          </label>\n          <input\n            type=\"date\"\n            name=\"dob\"\n            id=\"dob\"\n            onChange={(event) => {\n              setDateOfBirth(event.target.value);\n            }}\n          />\n        </div>\n        <button onClick={clickHandler}>Check</button>\n        <div className=\"output-div\">{outputMessage}</div>\n      </main>\n      <footer>\n        <ul id=\"social-media-tab\">\n          <li>\n            <a className=\"social-media-links\" href=\"https://github.com/iHarryD\">\n              GitHub\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"social-media-links\"\n              href=\"https://www.linkedin.com/in/prashant-kumar-a97251195/\"\n            >\n              LinkedIn\n            </a>\n          </li>\n        </ul>\n        <p id=\"portfolio-link\">\n          Website created by{\" \"}\n          <a href=\"https://iharryd.github.io/portfolio/\">Harry</a>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}