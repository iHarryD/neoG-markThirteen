{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","dateOfBirth","setDateOfBirth","outputMessage","setOutputMessage","fullDate","date","month","year","className","htmlFor","type","name","id","onChange","event","target","value","onClick","dateOfBirthList","split","allDateFormats","isPalindrome","forEach","format","reverse","join","allFormatPalindromeCheck","mmddyyyyFullDateString","mmddyyFullDateString","slice","ddmmyyFullDateString","ddmmyyyyFullDateString","yyyymmddFullDateString","yymmddFullDateString","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAmHeA,MAhHf,WACE,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0CF,mBACxC,sDADF,mBAAOG,EAAP,KAAsBC,EAAtB,KAQIC,EAAW,CACbC,KAAM,EACNC,MAAO,EACPC,KAAM,GAsDR,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,iEAEF,iCACE,sBAAKA,UAAU,YAAf,UACE,uBAAOC,QAAQ,MAAf,uCACA,uBACEC,KAAK,OACLC,KAAK,MACLC,GAAG,MACHC,SAAU,SAACC,GACTb,EAAea,EAAMC,OAAOC,aAIlC,wBAAQC,QApEd,WACE,IAAIC,EAAkBlB,EAAYmB,MAAM,KACxCf,EAASC,KAAOa,EAAgB,GAChCd,EAASE,MAAQY,EAAgB,GACjCd,EAASG,KAAOW,EAAgB,GACZ,KAAhBlB,EACFG,EAhBiB,gDAmDrB,SAAkCiB,GAChC,IAAIC,GAAe,EAMnB,OALAD,EAAeE,SAAQ,SAACC,GAClBA,IAA2BA,EAPJJ,MAAM,IAAIK,UAAUC,KAAK,MAQlDJ,GAAe,MAGZA,EAxCDK,CAQR,SAAwBtB,GACtB,IAAIuB,EAAyBvB,EAASE,MAAQF,EAASC,KAAOD,EAASG,KACnEqB,EACFxB,EAASE,MAAQF,EAASC,KAAOD,EAASG,KAAKsB,MAAM,EAAG,GACtDC,EACF1B,EAASC,KAAOD,EAASE,MAAQF,EAASG,KAAKsB,MAAM,EAAG,GACtDE,EAAyB3B,EAASC,KAAOD,EAASE,MAAQF,EAASG,KACnEyB,EAAyB5B,EAASG,KAAOH,EAASE,MAAQF,EAASC,KACnE4B,EACF7B,EAASG,KAAKsB,MAAM,EAAG,GAAKzB,EAASE,MAAQF,EAASC,KACxD,MAAO,CACLsB,EACAC,EACAE,EACAC,EACAC,EACAC,GAxB6Bb,CAAehB,IAG1CD,EAnByB,gDAiBzBA,EAlBwB,6CA6ExB,mBACA,qBAAKK,UAAU,aAAf,SAA6BN,OAE/B,mCACE,qBAAIU,GAAG,mBAAP,UACE,6BACE,mBAAGJ,UAAU,qBAAqB0B,KAAK,6BAAvC,sBAIF,6BACE,mBACE1B,UAAU,qBACV0B,KAAK,wDAFP,2BAQJ,oBAAGtB,GAAG,iBAAN,+BACqB,IACnB,mBAAGsB,KAAK,gDAAR,6BChGKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.75f5d5a1.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [dateOfBirth, setDateOfBirth] = useState(\"\");\n  const [outputMessage, setOutputMessage] = useState(\n    \"Fill in the form and press the button to continue.\"\n  );\n\n  const errorMessage = \"You need to enter a date first to continue.\";\n  const palindromeTrueMessage = \"Yay! Your birthday is a palindrome date.\";\n  const palindromeFalseMessage = \"Nay! Your birthday is not a palindrome date.\";\n\n  let fullDate = {\n    date: 0,\n    month: 0,\n    year: 0,\n  };\n\n  function clickHandler() {\n    let dateOfBirthList = dateOfBirth.split(\"-\");\n    fullDate.date = dateOfBirthList[2];\n    fullDate.month = dateOfBirthList[1];\n    fullDate.year = dateOfBirthList[0];\n    if (dateOfBirth === \"\") {\n      setOutputMessage(errorMessage);\n    } else {\n      if (allFormatPalindromeCheck(allDateFormats(fullDate))) {\n        setOutputMessage(palindromeTrueMessage);\n      } else {\n        setOutputMessage(palindromeFalseMessage);\n      }\n    }\n  }\n\n  function allDateFormats(fullDate) {\n    let mmddyyyyFullDateString = fullDate.month + fullDate.date + fullDate.year;\n    let mmddyyFullDateString =\n      fullDate.month + fullDate.date + fullDate.year.slice(3, 4);\n    let ddmmyyFullDateString =\n      fullDate.date + fullDate.month + fullDate.year.slice(3, 4);\n    let ddmmyyyyFullDateString = fullDate.date + fullDate.month + fullDate.year;\n    let yyyymmddFullDateString = fullDate.year + fullDate.month + fullDate.date;\n    let yymmddFullDateString =\n      fullDate.year.slice(3, 4) + fullDate.month + fullDate.date;\n    return [\n      mmddyyyyFullDateString,\n      mmddyyFullDateString,\n      ddmmyyFullDateString,\n      ddmmyyyyFullDateString,\n      yyyymmddFullDateString,\n      yymmddFullDateString,\n    ];\n  }\n\n  function unoReverseMaker(normalString) {\n    let unoString = normalString.split(\"\").reverse().join(\"\");\n    return unoString;\n  }\n\n  function allFormatPalindromeCheck(allDateFormats) {\n    let isPalindrome = false;\n    allDateFormats.forEach((format) => {\n      if (format === unoReverseMaker(format)) {\n        isPalindrome = true;\n      }\n    });\n    return isPalindrome;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Is your birthdate palindrome?</h1>\n      </header>\n      <main>\n        <div className=\"input-div\">\n          <label htmlFor=\"dob\">Enter your date of birth:</label>\n          <input\n            type=\"date\"\n            name=\"dob\"\n            id=\"dob\"\n            onChange={(event) => {\n              setDateOfBirth(event.target.value);\n            }}\n          />\n        </div>\n        <button onClick={clickHandler}>Check</button>\n        <div className=\"output-div\">{outputMessage}</div>\n      </main>\n      <footer>\n        <ul id=\"social-media-tab\">\n          <li>\n            <a className=\"social-media-links\" href=\"https://github.com/iHarryD\">\n              GitHub\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"social-media-links\"\n              href=\"https://www.linkedin.com/in/prashant-kumar-a97251195/\"\n            >\n              LinkedIn\n            </a>\n          </li>\n        </ul>\n        <p id=\"portfolio-link\">\n          Website created by{\" \"}\n          <a href=\"https://iharryd.github.io/personal-portfolio/\">Harry</a>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}